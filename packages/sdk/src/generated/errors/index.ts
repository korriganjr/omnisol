/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * Unauthorized: 'Unauthorized action'
 *
 * @category Errors
 * @category generated
 */
export class UnauthorizedError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'Unauthorized'
  constructor() {
    super('Unauthorized action')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnauthorizedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new UnauthorizedError())
createErrorFromNameLookup.set('Unauthorized', () => new UnauthorizedError())

/**
 * InvalidStakeAccount: 'Invalid stake account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakeAccountError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidStakeAccount'
  constructor() {
    super('Invalid stake account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStakeAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InvalidStakeAccountError())
createErrorFromNameLookup.set(
  'InvalidStakeAccount',
  () => new InvalidStakeAccountError(),
)

/**
 * InsufficientAmount: 'Insufficient amount'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientAmountError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InsufficientAmount'
  constructor() {
    super('Insufficient amount')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientAmountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InsufficientAmountError())
createErrorFromNameLookup.set(
  'InsufficientAmount',
  () => new InsufficientAmountError(),
)

/**
 * TypeOverflow: 'Type overflow'
 *
 * @category Errors
 * @category generated
 */
export class TypeOverflowError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'TypeOverflow'
  constructor() {
    super('Type overflow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TypeOverflowError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new TypeOverflowError())
createErrorFromNameLookup.set('TypeOverflow', () => new TypeOverflowError())

/**
 * PoolAlreadyPaused: 'Pool is already paused'
 *
 * @category Errors
 * @category generated
 */
export class PoolAlreadyPausedError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'PoolAlreadyPaused'
  constructor() {
    super('Pool is already paused')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PoolAlreadyPausedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new PoolAlreadyPausedError())
createErrorFromNameLookup.set(
  'PoolAlreadyPaused',
  () => new PoolAlreadyPausedError(),
)

/**
 * PoolAlreadyResumed: 'Pool is already resumed'
 *
 * @category Errors
 * @category generated
 */
export class PoolAlreadyResumedError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'PoolAlreadyResumed'
  constructor() {
    super('Pool is already resumed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PoolAlreadyResumedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new PoolAlreadyResumedError())
createErrorFromNameLookup.set(
  'PoolAlreadyResumed',
  () => new PoolAlreadyResumedError(),
)

/**
 * UserBlocked: 'User is blocked'
 *
 * @category Errors
 * @category generated
 */
export class UserBlockedError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'UserBlocked'
  constructor() {
    super('User is blocked')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UserBlockedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new UserBlockedError())
createErrorFromNameLookup.set('UserBlocked', () => new UserBlockedError())

/**
 * UserNotBlocked: 'User is not blocked'
 *
 * @category Errors
 * @category generated
 */
export class UserNotBlockedError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'UserNotBlocked'
  constructor() {
    super('User is not blocked')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UserNotBlockedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new UserNotBlockedError())
createErrorFromNameLookup.set('UserNotBlocked', () => new UserNotBlockedError())

/**
 * WrongData: 'Wrong input data'
 *
 * @category Errors
 * @category generated
 */
export class WrongDataError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'WrongData'
  constructor() {
    super('Wrong input data')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongDataError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new WrongDataError())
createErrorFromNameLookup.set('WrongData', () => new WrongDataError())

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
